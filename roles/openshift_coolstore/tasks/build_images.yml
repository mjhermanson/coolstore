---
## build coolstore images
- name: check if pre-built image project exists 
  shell: "{{ openshift_cli }} get project {{ prebuilt_images_project_name }}"
  register: result
  ignore_errors: true
  changed_when: false

- name: list pre-built images
  shell: "{{ openshift_cli }} get is -o json -n {{ prebuilt_images_project_name }}"
  register: prebuilt_is_list
  when: result is search('success')
  changed_when: false

- name: import pre-built images
  shell: "{{ openshift_cli }} tag {{ prebuilt_images_project_name }}/{{ item.metadata.name }}:latest {{ project_name }}/{{ item.metadata.name }}:latest"
  with_items: "{{ prebuilt_is_list.stdout|default('[]')|from_json|json_query('items') }}"
  when: >
     result is search('success') and 
     item|json_query("status.tags[?tag=='latest']") is not none and
     item|json_query("status.tags[?tag=='latest']")|trim() != '[]'

- name: create build configs in {{ project_name }}
  shell: >
    {{ openshift_cli }} process -f {{ builds_template }} \
      --param=GIT_URI={{ coolstore_github_repo }} \
      --param=GIT_REF={{ src_github_ref }} \
      --param=MAVEN_MIRROR_URL={{ maven_mirror_url }} \
      -n {{ project_name }} | {{ openshift_cli }} create -f - -n {{ project_name }}
  ignore_errors: true

- name: prune buildconfigs in {{ project_name }}
  shell: "{{ openshift_cli }} delete bc -l {{ prune_builds_selector }} -n {{ project_name }}"
  ignore_errors: true
  when: >
    prune_builds_selector is defined and 
    prune_builds_selector is not none and 
    prune_builds_selector|trim() != ""

- name: list build configs
  shell: "{{ openshift_cli }} get bc -l demo=coolstore-microservice -o jsonpath='{.items[*].metadata.name}' -n {{ project_name }}"
  register: builds_list
  changed_when: false

- name: list image streams
  shell: "{{ openshift_cli }} get is -o json -n {{ project_name }}"
  register: is_list
  changed_when: false

- name: build images
  shell: "{{ openshift_cli }} start-build {{ item.metadata.name }} -n {{ project_name }} --wait"
  with_items: "{{ is_list.stdout|default('[]')|from_json|json_query('items') }}"
  when:
    - item.metadata.name in builds_list.stdout.split()
    - (item|json_query("status.tags[?tag=='latest']") is none) or 
      (item|json_query("status.tags[?tag=='latest']")|trim() == '[]') or 
      (item|json_query("status.tags[?tag=='latest']")|trim() == '')
  register: build_result
  until: build_result is search('success')
  retries: 5
  delay: 30

- name: delete build configs
  shell: "{{ openshift_cli }} delete bc --all -n {{ project_name }}"
  when: not keep_build_configs